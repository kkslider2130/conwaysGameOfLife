import React, { useState, useCallback, useRef } from "react";
import "./App.scss";
import produce from "immer";
import { pulsar, flower, glider } from "./presets";
import flowerGif from "./gifs/flowerGif.gif";

const numRows = 25;
const numCols = 35;

const operations = [
  [0, 1],
  [0, -1],
  [1, -1],
  [-1, 1],
  [1, 1],
  [-1, -1],
  [1, 0],
  [-1, 0],
];

const resetGrid = () => {
  const rows = [];
  for (let i = 0; i < numRows; i++) {
    rows.push(Array.from(Array(numCols), () => 0));
  }
  return rows;
};

const runGame = (g) => {
  return produce(g, (gridCopy) => {
    for (let i = 0; i < numRows; i++) {
      for (let j = 0; j < numCols; j++) {
        let neighbors = 0;
        operations.forEach(([x, y]) => {
          const newI = i + x;
          const newJ = j + y;
          if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {
            neighbors += g[newI][newJ];
          }
        });
        if (neighbors < 2 || neighbors > 3) {
          gridCopy[i][j] = 0;
        } else if (g[i][j] === 0 && neighbors === 3) {
          gridCopy[i][j] = 1;
        }
      }
    }
  });
};

function App() {
  const [grid, setGrid] = useState(() => {
    return resetGrid();
  });
  const [running, setRunning] = useState(false);
  const [speedUp, setSpeedUp] = useState(false);
  const runningRef = useRef(running);
  runningRef.current = running;
  const runSimulation = useCallback(() => {
    if (!runningRef.current) {
      return;
    }
    setGrid((g) => {
      return runGame(g);
    });

    setTimeout(runSimulation, speedUp ? 400 : 800);
  }, [speedUp]);
  const runStep = useCallback(() => {
    if (!runningRef.current) {
      return;
    }
    setGrid((g) => {
      return runGame(g);
    });
  }, []);
  return (
    <div className="app-con">
      <h1 className="title">Conway's Game of Life</h1>
      <div className="content">
        <div
          className="grid"
          style={{
            display: "grid",
            gridTemplateColumns: `repeat(${numCols},20px)`,
            background: "white",
          }}
        >
          {grid.map((rows, i) =>
            rows.map((col, k) => (
              <div
                key={`${i}-${k}`}
                onClick={() => {
                  if (!running) {
                    const newGrid = produce(grid, (gridCopy) => {
                      gridCopy[i][k] = grid[i][k] ? 0 : 1;
                      console.log(grid);
                    });
                    setGrid(newGrid);
                  } else {
                    return null;
                  }
                }}
                style={{
                  width: 20,
                  height: 20,
                  backgroundColor: grid[i][k] ? "black" : undefined,
                  border: "solid 1px black",
                }}
              ></div>
            ))
          )}
        </div>
        <div className="instructions">
          <p>
            The game of life, not to be confused with the board game "life", is
            a automatic cell simulation game that mimics the evolution of life
            with simple cell block representations with it's evolution and death
            generated by basic algorithms. The rules are simple:
          </p>
          <li>Click on any cell on the grid to initiate a live cell</li>
          <li>
            Any live cell with fewer than two live neighbours will perish
            (underpopulation)
          </li>
          <li>
            Any live cell with more than three live neighbours will perish
            (overpopulation)
          </li>
          <li>
            Any live cell with two or three live neighbours lives on to the next
            generation(reproduction)
          </li>
          <div className="samples">
            <p>
              Try clicking any of these samples to start, or experiment with
              drawing your own
            </p>
            <div className="gifs">
              <img
                src="https://upload.wikimedia.org/wikipedia/commons/0/07/Game_of_life_pulsar.gif"
                alt="oscilator"
                onClick={() => {
                  setGrid(pulsar);
                }}
              />
              <img
                src={flowerGif}
                alt="flower"
                onClick={() => {
                  setGrid(flower);
                }}
              />
              <img
                src="https://upload.wikimedia.org/wikipedia/commons/f/f2/Game_of_life_animated_glider.gif"
                alt="glider"
                onClick={() => {
                  setGrid(glider);
                }}
              />
            </div>
          </div>
        </div>
      </div>
      <div className="controls">
        <i
          class="fas fa-play"
          onClick={() => {
            setRunning(true);
            if (!running) {
              runningRef.current = true;
              runSimulation();
            }
          }}
        ></i>
        <i
          class="fas fa-stop"
          onClick={() => {
            setRunning(false);
          }}
        ></i>
        {!speedUp ? (
          <i
            class="fas fa-fast-forward"
            onClick={() => {
              setSpeedUp(true);
            }}
            style={{
              opacity: !running ? 1 : 0.5,
              pointerEvents: !running ? "auto" : "none",
            }}
          ></i>
        ) : (
          <i
            class="fas fa-backward"
            onClick={() => {
              setSpeedUp(false);
            }}
            style={{
              opacity: !running ? 1 : 0.5,
              pointerEvents: !running ? "auto" : "none",
            }}
          ></i>
        )}

        <i
          class="fas fa-step-forward"
          onClick={() => {
            runningRef.current = true;
            runStep();
          }}
        ></i>
        <button
          onClick={() => {
            setGrid(resetGrid());
            setRunning(false);
          }}
        >
          Reset
        </button>
        <button
          onClick={() => {
            const rows = [];
            for (let i = 0; i < numRows; i++) {
              rows.push(
                Array.from(Array(numCols), () => (Math.random() > 0.5 ? 1 : 0))
              );
            }
            setGrid(rows);
          }}
        >
          Randomize
        </button>
      </div>
      <p className="speed">{speedUp ? "2x Speed" : "1x speed"}</p>
    </div>
  );
}

export default App;
